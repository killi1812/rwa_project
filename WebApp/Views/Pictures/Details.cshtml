@model WebApp.ViewModels.PictureDetailsVM
@{
    ViewData["Title"] = "Details";
    var picture = Model;
    var user = ViewContext.HttpContext.User;
    bool isAdmin = false;
    if (user != null && !string.IsNullOrEmpty(user.Identity.Name))
        isAdmin = user.Claims.FirstOrDefault(c => c.Type == "IsAdmin")?.Value == "True";
}
@if (isAdmin)
{
    <div>
        <a class="btn btn-secondary" href="@Url.Action("Edit", "Pictures", new { guid = Model.Guid })">Edit</a>
        <button id="delete" class="btn btn-danger">Delete</button>
    </div>
}
<div class="pic-details">
    <div id="img-spinner" class="text-center">
        <div class="spinner-border loading-big" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <h1 class="text-center">
        @picture.Name
    </h1>
    <div class="tag-container">
        @foreach (var tag in picture.Tags)
        {
            <a href="@Url.Action("Search", "Pictures", new { query = $"Tag={tag}" })">@tag</a>
        }
    </div>
    <hr/>
    <div class="shadow p-3 mb-5 rounded">
        <div class="desc-body">
            <p>
                @picture.Description
            </p>
        </div>

        <div class="desc-footer">
            <p>
                Photographer:
                <a href="@Url.Action("Search", "Pictures", new { query = $"Photographer={picture.Photographer}" })">
                    @picture.Photographer
                </a>
            </p>
            <p>
                Uploaded by: <a href="@Url.Action("UserUploads", "User", new { guid = picture.UserGuid })">@picture.Username</a>
            </p>

        </div>
    </div>
    <div>
        <a id="DownloadButton" class="btn btn-primary" href="@Url.Action("Download", "Pictures", new { guid = picture.Guid })">
            Download
            @* TODO add refresh on Download *@
        </a>
        <p>Downloads count: @picture.DownloadsCount</p>
    </div>

    <p>Downloads:</p>
    <div id="downloadsContainer" class="shadow p-3 mb-5 rounded">
        @foreach (var download in picture.Downloads)
        {
            <p>@download</p>
        }
    </div>
</div>
<script>
    const downloadsContainer = document.getElementById('downloadsContainer');
    let page = 1;
    const pageSize = 10;

    function LoadPicture() {
        const xhttp = new XMLHttpRequest();
        xhttp.open('GET', `@Url.Action("Data", "Pictures", new { guid = picture.Guid })`, true);
        xhttp.responseType = 'blob';
        xhttp.onload = function() {
            if (xhttp.status === 200) {
                const img = document.createElement('img');
                const imgSpinner = document.getElementById('img-spinner');
                imgSpinner.replaceWith(img);
                img.className = 'img-big rounded-1';
                img.src = URL.createObjectURL(xhttp.response);
                img.alt = '@picture.Name';
            } else {
                console.log('Error:', xhttp.statusText);
            }
        };
        xhttp.onerror = function() {
            console.log('Error:', xhttp.statusText);
        };
        xhttp.send();
    }
    
    //TODO check why blocking
    document.getElementById("DownloadButton").addEventListener("click",() =>{
        const xhttp = new XMLHttpRequest();
        page = 1
        xhttp.open('GET', `@Url.Action("LoadMoreDownloads", "Pictures", new { guid = picture.Guid })&page=${page}&pageSize=${pageSize}`, true);
        xhttp.responseType = 'json';
        xhttp.onload = function() {
            if (xhttp.status === 200) {
            downloadsContainer.clear();
                xhttp.response.forEach(download => {
                    const p = document.createElement('p');
                    p.textContent = download;
                    downloadsContainer.appendChild(p);
                });
            } else {
                console.log('Error:', xhttp.statusText);
            }
        };
        xhttp.onerror = function() {
            console.log('Error:', xhttp.statusText);
        };
        xhttp.send();
    }); 
    
    downloadsContainer.addEventListener('scroll', function() {
        if (downloadsContainer.scrollTop + downloadsContainer.clientHeight >= downloadsContainer.scrollHeight) {
            loadMoreDownloads();
        }
    });
    

    function loadMoreDownloads() {
        const xhttp = new XMLHttpRequest();
        xhttp.open('GET', `@Url.Action("LoadMoreDownloads", "Pictures", new { guid = picture.Guid })&page=${page}&pageSize=${pageSize}`, true);
        xhttp.responseType = 'json';
        xhttp.onload = function() {
            if (xhttp.status === 200) {
                xhttp.response.forEach(download => {
                    const p = document.createElement('p');
                    p.textContent = download;
                    downloadsContainer.appendChild(p);
                });
                page++;
            } else {
                console.log('Error:', xhttp.statusText);
            }
        };
        xhttp.onerror = function() {
            console.log('Error:', xhttp.statusText);
        };
        xhttp.send();
    }

    document.addEventListener('DOMContentLoaded', LoadPicture);
    
    const del = document.getElementById("delete");
    del.addEventListener("click", () => {
        if (confirm("Are you sure you want to delete this picture?")) {
            location.href = `@Url.Action("Delete", "Pictures", new { guid = picture.Guid })`}
       }
    );
    
</script>