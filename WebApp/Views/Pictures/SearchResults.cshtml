@using Microsoft.EntityFrameworkCore.Query
@using WebApp.ViewModels
@model SearchVM<PictureVM>
@{
    ViewData["Title"] = "Search Results";
    ViewData["query"] = Model.Query;
}
<h1>
    Search Results
</h1>
<form role="search" asp-controller="Pictures" asp-action="Search">
    <div class="d-flex">
        <input name="query" class="form-control me-2" type="search" placeholder="Search" aria-label="Search"
               value="@ViewData["query"]">
        @* TODO order by date, name, size, etc. *@
        <button class="btn btn-outline-success" type="submit">Search</button>
    </div>
</form>
<div>
    <hr/>
    <div style="
        display: flex;
        overflow-wrap: normal;
        gap: 2rem;
        flex-wrap: wrap;
        justify-content: center;">
        @foreach (var picture in Model.Items ?? new List<PictureVM>())
        {
            <a id="@picture.Guid" class="card placeholder-glow"
               style=" overflow: hidden;height: 250px; width: 200px; text-decoration: none; color: black;"
               href="@Url.Action("Details", "Pictures", new { guid = picture.Guid })">
                <div class="card-img-top placeholder"
                     style="width: 200px; height: 200px;">
                </div>
                <div class="card-body">
                    <div class="card-body">
                        <h5 class="card-title">
                            @picture.Name
                        </h5>
                        <p class="card-text">@picture.Description</p>

                    </div>
                </div>
            </a>
        }
    </div>
    <hr/>
    <div>
        @* TODO paginations should be in js with ajax *@
        <ul class="pagination">
            <li class="page-item">
                <a class="page-link"
                   href="@Url.Action("Search", "Pictures", new { Page = 1, PageSize = Model.Size, query = Model.Query })">
                    «
                </a>
            </li>
            @for (int i = Model.FromPage; i <= Model.ToPage; i++)
            {
                var linkText = i.ToString();
                var linkClass = "page-item";
                if (i == Model.Page)
                {
                    linkClass = "page-item active";
                }

                <li class="@linkClass">
                    <a class="page-link"
                       href="@Url.Action("Search", "Pictures", new { page = i, pageSize = Model.Size, query = Model.Query })">
                        @linkText
                    </a>
                </li>
            }
            <li class="page-item">
                <a class="page-link"
                   href="@Url.Action("Search", "Pictures", new { Page = Model.LastPage, PageSize = Model.Size, query = Model.Query })">
                    »
                </a>
            </li>
        </ul>
    </div>
</div>
<script>
    const cards = document.querySelectorAll('.card');
    cards.forEach(card => {
        let url = "@Url.Action("Data", "Pictures")";
        url += `?guid=${card.id}`;

        const xhttp = new XMLHttpRequest();
        xhttp.open('GET', url, true);
        xhttp.responseType = 'blob';
    
        xhttp.onload = function() {
        if (xhttp.status === 200) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(xhttp.response);
            img.style = 'max-width: 200px; max-height: 200px;';
            card.querySelectorAll('.placeholder').forEach(placeholder => placeholder.className = 'card-img-top');
            card.querySelector('.card-img-top').appendChild(img);
        } 
        else {
            console.error('Error:', xhttp.statusText);
        }
    };
        xhttp.onerror = function() {
        };
        xhttp.send();
    });
    
</script>